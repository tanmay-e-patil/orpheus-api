// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: songs.sql

package database

import (
	"context"
	"time"
)

const createSong = `-- name: CreateSong :one
INSERT INTO songs (id, name, artist_name, album_name, album_art, duration, video_id, created_at, updated_at)
VALUES ($1, $2, $3, $4,  $5, $6, $7, $8, $9)
RETURNING id, name, artist_name, album_name, album_art, duration, video_id, created_at, updated_at
`

type CreateSongParams struct {
	ID         string
	Name       string
	ArtistName string
	AlbumName  string
	AlbumArt   string
	Duration   string
	VideoID    string
	CreatedAt  time.Time
	UpdatedAt  time.Time
}

func (q *Queries) CreateSong(ctx context.Context, arg CreateSongParams) (Song, error) {
	row := q.db.QueryRowContext(ctx, createSong,
		arg.ID,
		arg.Name,
		arg.ArtistName,
		arg.AlbumName,
		arg.AlbumArt,
		arg.Duration,
		arg.VideoID,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	var i Song
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.ArtistName,
		&i.AlbumName,
		&i.AlbumArt,
		&i.Duration,
		&i.VideoID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getSongById = `-- name: GetSongById :one
SELECT id, name, artist_name, album_name, album_art, duration, video_id, created_at, updated_at FROM songs
WHERE id = $1
`

func (q *Queries) GetSongById(ctx context.Context, id string) (Song, error) {
	row := q.db.QueryRowContext(ctx, getSongById, id)
	var i Song
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.ArtistName,
		&i.AlbumName,
		&i.AlbumArt,
		&i.Duration,
		&i.VideoID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
