// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: users.sql

package database

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (id, created_at, updated_at, username, email, password, refresh_token)
VALUES ($1, $2, $3, $4,  $5, $6, $7)
RETURNING id, created_at, updated_at, username, email, password, refresh_token
`

type CreateUserParams struct {
	ID           uuid.UUID
	CreatedAt    time.Time
	UpdatedAt    time.Time
	Username     string
	Email        string
	Password     string
	RefreshToken string
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, createUser,
		arg.ID,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.Username,
		arg.Email,
		arg.Password,
		arg.RefreshToken,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Username,
		&i.Email,
		&i.Password,
		&i.RefreshToken,
	)
	return i, err
}

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT id, created_at, updated_at, username, email, password, refresh_token FROM users
WHERE email = $1
`

func (q *Queries) GetUserByEmail(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByEmail, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Username,
		&i.Email,
		&i.Password,
		&i.RefreshToken,
	)
	return i, err
}

const getUserByID = `-- name: GetUserByID :one
SELECT id, created_at, updated_at, username, email, password, refresh_token from users
WHERE id = $1
`

func (q *Queries) GetUserByID(ctx context.Context, id uuid.UUID) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByID, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Username,
		&i.Email,
		&i.Password,
		&i.RefreshToken,
	)
	return i, err
}

const getUserByRefreshToken = `-- name: GetUserByRefreshToken :one
SELECT id, created_at, updated_at, username, email, password, refresh_token from users
WHERE refresh_token = $1
`

func (q *Queries) GetUserByRefreshToken(ctx context.Context, refreshToken string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByRefreshToken, refreshToken)
	var i User
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Username,
		&i.Email,
		&i.Password,
		&i.RefreshToken,
	)
	return i, err
}

const updateUserWithRefreshToken = `-- name: UpdateUserWithRefreshToken :one
UPDATE users SET refresh_token = $1
WHERE id = $2
RETURNING id, created_at, updated_at, username, email, password, refresh_token
`

type UpdateUserWithRefreshTokenParams struct {
	RefreshToken string
	ID           uuid.UUID
}

func (q *Queries) UpdateUserWithRefreshToken(ctx context.Context, arg UpdateUserWithRefreshTokenParams) (User, error) {
	row := q.db.QueryRowContext(ctx, updateUserWithRefreshToken, arg.RefreshToken, arg.ID)
	var i User
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Username,
		&i.Email,
		&i.Password,
		&i.RefreshToken,
	)
	return i, err
}
